{"ast":null,"code":"import axios from 'axios';\nimport API_URL from '../config';\n\n// Fetch list of users\nexport const listUser = async (userId, token) => {\n  try {\n    const response = await axios.get(`${API_URL}/users/${userId}/list`, {\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    return {\n      error: error.response ? error.response.data.error : 'Something went wrong'\n    };\n  }\n};\nexport const getUser = async (userId, token) => {\n  try {\n    const response = await axios.get(`${API_URL}/user/${userId}/details`, {\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    // Check if the response is successful\n    if (response.status === 200) {\n      return response.data; // Return data if successful\n    } else {\n      return {\n        error: 'Failed to fetch user details'\n      }; // Return error message otherwise\n    }\n  } catch (error) {\n    // Handle network errors or invalid responses\n    return {\n      error: error.response ? error.response.data.error : 'Something went wrong'\n    };\n  }\n};\n\n// Update user information\nexport const updateUser = async (userId, user, token) => {\n  try {\n    const response = await axios.put(`${API_URL}/user/${userId}`, user, {\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    return {\n      error: error.response ? error.response.data.error : 'Something went wrong'\n    };\n  }\n};\nexport const createCharge = async (userId, token, charge) => {\n  try {\n    const response = await axios.post(`${API_URL}/charge/create/${userId}`, charge, {\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (err) {\n    console.error('Error creating category:', err.response ? err.response.data : err.message);\n    throw err;\n  }\n};\nexport const getAllCharges = async token => {\n  try {\n    const response = await axios.get(`${API_URL}/charge/list`, {\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (err) {\n    console.error('Error fetching all charges:', err.response ? err.response.data : err.message);\n    throw err;\n  }\n};\nexport const createUserJurisdiction = async (userId, token, charge) => {\n  try {\n    const response = await axios.post(`${API_URL}/jurisdiction/create/${userId}`, charge, {\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (err) {\n    console.error('Error creating category:', err.response ? err.response.data : err.message);\n    throw err;\n  }\n};","map":{"version":3,"names":["axios","API_URL","listUser","userId","token","response","get","headers","data","error","getUser","status","updateUser","user","put","createCharge","charge","post","Accept","Authorization","err","console","message","getAllCharges","createUserJurisdiction"],"sources":["D:/My-Tutorial/refund/frontent/src/admin/apiAdmin.js"],"sourcesContent":["import axios from 'axios';\nimport API_URL from '../config';\n\n// Fetch list of users\nexport const listUser = async (userId, token) => {\n  try {\n    const response = await axios.get(`${API_URL}/users/${userId}/list`, {\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    return { error: error.response ? error.response.data.error : 'Something went wrong' };\n  }\n};\n\nexport const getUser = async (userId, token) => {\n  try {\n      const response = await axios.get(`${API_URL}/user/${userId}/details`, {\n          headers: {\n              'Accept': 'application/json',\n              'Content-Type': 'application/json',\n              'Authorization': `Bearer ${token}`\n          }\n      });\n      // Check if the response is successful\n      if (response.status === 200) {\n          return response.data; // Return data if successful\n      } else {\n          return { error: 'Failed to fetch user details' }; // Return error message otherwise\n      }\n  } catch (error) {\n      // Handle network errors or invalid responses\n      return { error: error.response ? error.response.data.error : 'Something went wrong' };\n  }\n};\n\n\n// Update user information\nexport const updateUser = async (userId, user, token) => {\n    try {\n        const response = await axios.put(`${API_URL}/user/${userId}`, user, {\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${token}`\n            }\n        });\n        return response.data;\n    } catch (error) {\n        return { error: error.response ? error.response.data.error : 'Something went wrong' };\n    }\n};\n\n\nexport const createCharge = async (userId, token, charge) => {\n  try {\n      const response = await axios.post(\n          `${API_URL}/charge/create/${userId}`,\n          charge,\n          {\n              headers: {\n                  Accept: 'application/json',\n                  'Content-Type': 'application/json',\n                  Authorization: `Bearer ${token}`\n              }\n          }\n      );\n      return response.data;\n  } catch (err) {\n      console.error('Error creating category:', err.response ? err.response.data : err.message);\n      throw err; \n  }\n};\n\nexport const getAllCharges = async (token) => {\n  try {\n      const response = await axios.get(\n          `${API_URL}/charge/list`,\n          {\n              headers: {\n                  Accept: 'application/json',\n                  'Content-Type': 'application/json',\n                  Authorization: `Bearer ${token}`\n              }\n          }\n      );\n      return response.data;\n  } catch (err) {\n      console.error('Error fetching all charges:', err.response ? err.response.data : err.message);\n      throw err; \n  }\n};\n\nexport const createUserJurisdiction = async (userId, token, charge) => {\n    try {\n        const response = await axios.post(\n            `${API_URL}/jurisdiction/create/${userId}`,\n            charge,\n            {\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    Authorization: `Bearer ${token}`\n                }\n            }\n        );\n        return response.data;\n    } catch (err) {\n        console.error('Error creating category:', err.response ? err.response.data : err.message);\n        throw err; \n    }\n  };\n  \n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}